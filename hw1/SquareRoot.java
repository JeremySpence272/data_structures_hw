/*
 * Data Structures in Java Fall 2025: Programming Assignment 1 - Computing Square Roots
 * Author: Jeremy Spence - js6721
 * Completed On: September 6 2025
 *
 * Note: All JavaDoc-style docstrings in this file were generated by GPT-5.
 * Everything else was written manually.
 */

/**
 * Utility class that provides methods for computing square roots
 * using Newton's method. Includes a command-line interface for
 * parsing arguments and printing results.
 */
public class SquareRoot {

    /**
     * Default epsilon value (1e-7) used when no epsilon is provided.
     */
    public static final double EPSILON = 1e-7;

    /**
     * Computes the square root of a given number using Newton's method.
     *
     * @param num the number to compute the square root of
     * @param epsilon the tolerance for convergence (must be > 0)
     * @return the approximate square root of num, or NaN if num is negative or NaN
     */
    public static double sqrt(double num, double epsilon) {

        if (Double.isNaN(num) || num < 0) return Double.NaN;
        if (num == 0.0 || num == Double.POSITIVE_INFINITY) return num;

        double currentGuess = num;
        double previousGuess;

        do {
            previousGuess = currentGuess;
            currentGuess = 0.5*(previousGuess + num/previousGuess);
        } while (Math.abs(currentGuess - previousGuess) > epsilon);

        return currentGuess;
    }

    /**
     * Entry point for the program. Parses command-line arguments,
     * validates input, and prints the square root of the provided value.
     *
     * Usage: java SquareRoot <value> [epsilon]
     *
     * @param args command-line arguments: required value, optional epsilon
     */
    public static void main(String[] args) {

        if (args.length < 1 || args.length > 2) {
            System.err.println("Usage: java SquareRoot <value> [epsilon]");
            System.exit(-1);
        }

        double value;
        double epsilon = EPSILON;

        // only reach here if first arg exists
        try {
            value = Double.parseDouble(args[0]);
        } catch (NumberFormatException e) {
            System.err.println("Error: Value argument must be a double.");
            System.exit(-1);
            return; // unreachable - needed for compiler
        }

        if (args.length == 2) {
            try {
                epsilon = Double.parseDouble(args[1]);
                if (epsilon <= 0) throw new IllegalArgumentException("Epsilon must be positive");
            // NumberFormatException is subclass of IllegalArgumentException - only need to catch one
            } catch (IllegalArgumentException e) {
                System.err.println("Error: Epsilon argument must be a positive double.");
                System.exit(-1);
            }
        }

        double result = sqrt(value, epsilon);
        System.out.printf("%.8f%n", result);
    }
}
